-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS public.clients
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    client_type character varying(20) COLLATE pg_catalog."default",
    client_name character varying(30) COLLATE pg_catalog."default",
    status boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    update_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT clients_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.clients DROP COLUMN IF EXISTS client_type;

ALTER TABLE IF EXISTS public.clients DROP COLUMN IF EXISTS client_name;

ALTER TABLE IF EXISTS public.clients DROP COLUMN IF EXISTS status;

ALTER TABLE IF EXISTS public.clients DROP COLUMN IF EXISTS created_at;

ALTER TABLE IF EXISTS public.clients DROP COLUMN IF EXISTS update_at;

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN client_type_id integer;

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN client_name character varying(30);

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN status boolean DEFAULT true;

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE IF EXISTS public.clients
    ADD CONSTRAINT client_type_id_fk FOREIGN KEY (client_type_id)
    REFERENCES public."client_Type" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

CREATE TABLE IF NOT EXISTS public.locations
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    location_name character varying(20) COLLATE pg_catalog."default",
    adddress character varying(45) COLLATE pg_catalog."default",
    city character varying(20) COLLATE pg_catalog."default",
    pincode bigint,
    client_id bigint NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    status boolean DEFAULT true,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.locations
    ADD PRIMARY KEY (id);

CREATE TABLE IF NOT EXISTS public.blocks
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    location_id bigint NOT NULL,
    name character varying(50),
    no_of_floors bigint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.facilities
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    location_id bigint NOT NULL,
    block_id bigint NOT NULL,
    floor_number bigint,
    name character varying(50),
    description character varying(100),
    shift character varying(50),
    no_of_booths bigint,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.locations
    OWNER to postgres;

ALTER TABLE public.clients
ALTER COLUMN id TYPE integer;
    ADD CONSTRAINT client_id_fk FOREIGN KEY (client_id)
    REFERENCES public.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
ALTER TABLE IF EXISTS public.locations
    RENAME adddress TO address;

ALTER TABLE IF EXISTS public.blocks
    ADD CONSTRAINT location_id_fk FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.facilities
    ADD CONSTRAINT location_fk FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.facilities
    ADD CONSTRAINT block_fk FOREIGN KEY (block_id)
    REFERENCES public.blocks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

ALTER TABLE IF EXISTS public.facilities DROP COLUMN IF EXISTS shift;

ALTER TABLE IF EXISTS public.facilities
    ADD COLUMN shift jsonb;

ALTER TABLE IF EXISTS public.facilities
    ADD COLUMN status boolean DEFAULT true;

ALTER TABLE IF EXISTS public.facilities
    ADD COLUMN created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public.facilities
    ADD COLUMN updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE public.facilities
    ALTER COLUMN id TYPE integer;

ALTER TABLE public.facilities
    ALTER COLUMN location_id TYPE integer;

ALTER TABLE public.facilities
    ALTER COLUMN block_id TYPE integer;

ALTER TABLE public.facilities
    ALTER COLUMN floor_number TYPE integer;

ALTER TABLE public.facilities
    ALTER COLUMN no_of_booths TYPE integer;

    ALTER TABLE IF EXISTS public.facilities
    RENAME shift TO shift_id;

CREATE TABLE public.block
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    block_name character varying(30),
    location_id integer,
    client_id integer,
    no_of_floors integer,
    status boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.block
OWNER to postgres;

ALTER TABLE IF EXISTS public.block
    ALTER COLUMN status SET DEFAULT true;

ALTER TABLE IF EXISTS public.block
    ALTER COLUMN created_at SET DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public.block
    ALTER COLUMN updated_at SET DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public.block
    ADD CONSTRAINT location_id FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.block
    ADD CONSTRAINT client_id FOREIGN KEY (client_id)
    REFERENCES public.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
    
    ALTER TABLE IF EXISTS public.block
    RENAME CONSTRAINT client_id TO client_id_fk;

ALTER TABLE IF EXISTS public.block
    RENAME CONSTRAINT id TO location_id_fk;
    
ALTER TABLE IF EXISTS public.block
    RENAME TO blocks;

ALTER TABLE IF EXISTS public.blocks DROP COLUMN IF EXISTS client_id;
ALTER TABLE IF EXISTS public.blocks DROP CONSTRAINT IF EXISTS client_id_fk;

CREATE TABLE public."client_Type"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2345643565 CACHE 1 ),
    client_type character varying(30),
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."client_Type"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."client_Type"
    ALTER COLUMN id SET MAXVALUE 2147483646;

ALTER TABLE IF EXISTS public."client_Type"
    ADD COLUMN created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public."client_Type"
    ADD COLUMN updted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public."client_Type"
    RENAME TO client_type;

CREATE TABLE public.shift
(
    id integer NOT NULL,
    start_time character varying(20),
    end_time character varying(20),
    status boolean DEFAULT true,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.shift
    OWNER to postgres;

ALTER TABLE IF EXISTS public.shift
    ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 );

ALTER TABLE IF EXISTS public.iot_devices
    ADD COLUMN type character varying(50);
ALTER TABLE public.iot_devices
    ALTER COLUMN id TYPE integer;

ALTER TABLE public.iot_devices
    ALTER COLUMN mapping_id TYPE integer;

ALTER TABLE IF EXISTS public.blocks DROP COLUMN IF EXISTS no_of_floors;

ALTER TABLE IF EXISTS public.blocks
    RENAME block_name TO name;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN client_id integer;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN min_floor integer;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN max_floor integer;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN lat integer;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN lng integer;
ALTER TABLE IF EXISTS public.blocks DROP CONSTRAINT IF EXISTS location_id_fk;

ALTER TABLE IF EXISTS public.blocks
    ADD CONSTRAINT client_id_fk FOREIGN KEY (client_id)
    REFERENCES public.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.blocks
    ADD CONSTRAINT location_id_fk FOREIGN KEY (location_id)

ALTER TABLE IF EXISTS public.shift DROP COLUMN IF EXISTS location_id;

ALTER TABLE IF EXISTS public.shift DROP COLUMN IF EXISTS shift_name;

ALTER TABLE IF EXISTS public.shift
    ADD COLUMN location_id integer;

ALTER TABLE IF EXISTS public.shift
    ADD COLUMN client_id integer;

ALTER TABLE IF EXISTS public.shift
    ADD COLUMN shift_name character varying(50);
ALTER TABLE IF EXISTS public.shift DROP CONSTRAINT IF EXISTS fk_shift_location;

ALTER TABLE IF EXISTS public.shift
    ADD CONSTRAINT fk_location_id FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.shift DROP COLUMN IF EXISTS status;

ALTER TABLE IF EXISTS public.shift
    ADD COLUMN status boolean DEFAULT true;

ALTER TABLE IF EXISTS public.blocks DROP COLUMN IF EXISTS lat;

ALTER TABLE IF EXISTS public.blocks DROP COLUMN IF EXISTS lng;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN lat numeric;

ALTER TABLE IF EXISTS public.blocks
    ADD COLUMN lng numeric;
ALTER TABLE IF EXISTS public.shift
    ADD CONSTRAINT fk_client_id FOREIGN KEY (client_id)
    REFERENCES public.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


 ALTER TABLE task DROP COLUMN status;

ALTER TABLE tasks ADD COLUMN status bigint

ALTER TABLE templates DROP COLUMN status;

ALTER TABLE templates ADD COLUMN status bigint

	ALTER TABLE shift DROP COLUMN status;

ALTER TABLE shift ADD COLUMN status bigint


ALTER TABLE IF EXISTS public.locations DROP COLUMN IF EXISTS status;

ALTER TABLE public.locations
    ALTER COLUMN id TYPE integer;

ALTER TABLE public.locations
    ALTER COLUMN pincode TYPE integer;

ALTER TABLE public.locations
    ALTER COLUMN client_id TYPE integer;

ALTER TABLE IF EXISTS public.locations
    ADD COLUMN status boolean DEFAULT true;

ALTER TABLE public.iot_devices
    ALTER COLUMN ppm_time TYPE timestamp with time zone ;


CREATE TABLE public.users
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name character varying(50) NOT NULL,
    mobile character varying(10) NOT NULL,
    email character varying(100),
    role_id integer NOT NULL,
    status boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.auto_task_mapping
    ADD COLUMN id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 );

    ALTER TABLE IF EXISTS public.task_templates DROP COLUMN IF EXISTS status;

ALTER TABLE IF EXISTS public.task_templates
    ADD COLUMN status boolean DEFAULT true;
    ALTER TABLE task_templates
ADD  estimated_time INTEGER;

ALTER TABLE IF EXISTS public.iot_devices DROP COLUMN IF EXISTS mapping_id;

ALTER TABLE IF EXISTS public.iot_devices DROP COLUMN IF EXISTS mapping_type;
ALTER TABLE public.task_checklist
    ALTER COLUMN id TYPE integer;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN city character varying(100);

ALTER TABLE IF EXISTS public.iot_device_mapping
    ADD COLUMN device_type character varying(50);

    CREATE TABLE public.rules
(
    id integer NOT NULL,
    name character varying(50),
    trigger_value integer,
    value_type character varying(20),
    mapping_template_id integer,
    status boolean NOT NULL DEFAULT true,
    facility_id integer,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.rules
    OWNER to postgres;


    ALTER TABLE IF EXISTS public.otps
    ADD COLUMN trials integer;

    CREATE TABLE IF NOT EXISTS public.clusters
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cluster_name character varying(100) COLLATE pg_catalog."default",
    facilities integer[],
    pincode integer,
    status boolean,
    CONSTRAINT clusters_pkey PRIMARY KEY (id)
)



CREATE TABLE public.clusters_janitor_mapping
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    cluster_id integer,
    janitors integer[],
    PRIMARY KEY (id),
    CONSTRAINT fk_cluster_id FOREIGN KEY (cluster_id)
        REFERENCES public.clusters (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

CREATE TABLE public.attendance_activity
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    janitor_id integer NOT NULL,
    logs jsonb,
    created_at timestamp without time zone,
    PRIMARY KEY (id)
);



ALTER TABLE public.users
    ALTER COLUMN name TYPE character varying(100) COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.users
    ADD COLUMN start_time time without time zone;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN end_time time without time zone;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN gender character varying;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN mobile character varying;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN status boolean;


ALTER TABLE IF EXISTS public.users
    ADD COLUMN role_id integer;

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN update_logs jsonb;

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN remarks character varying(150);

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN selfie_image character varying(200);

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN task_images jsonb;

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN task_status jsonb;

ALTER TABLE IF EXISTS public.task_checklist DROP COLUMN IF EXISTS status;

ALTER TABLE IF EXISTS public.task_checklist
    ADD COLUMN status boolean DEFAULT true;

    ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN type character varying;

    ALTER TABLE IF EXISTS public.auto_task_mapping DROP COLUMN IF EXISTS shift_id;
ALTER TABLE IF EXISTS public.auto_task_mapping DROP CONSTRAINT IF EXISTS fk_shift_id;




ALTER TABLE IF EXISTS public.clusters_users_mapping
    ALTER COLUMN cluster_id SET NOT NULL;

ALTER TABLE IF EXISTS public.clusters_users_mapping
    ALTER COLUMN janitors SET DEFAULT [];

ALTER TABLE IF EXISTS public.clusters_users_mapping
    ALTER COLUMN janitors SET NOT NULL;

ALTER TABLE IF EXISTS public.clusters_users_mapping
    ADD COLUMN supervisors integer[] NOT NULL DEFAULT [];


ALTER TABLE IF EXISTS public.users
    ADD COLUMN fcm_token character varying(150);
    ALTER TABLE IF EXISTS public.users
    ADD COLUMN address character varying(300);

ALTER TABLE IF EXISTS public.users
    ADD COLUMN city character varying(50);

ALTER TABLE IF EXISTS public.users
    ADD COLUMN cluster_name character varying(50);

ALTER TABLE IF EXISTS public.users
    ADD COLUMN documents character varying[];

    ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN description character varying(100);

ALTER TABLE IF EXISTS public.task_allocation
    ADD COLUMN initial_janitor_id integer;

ALTER TABLE IF EXISTS public.users
    ADD COLUMN password character varying(500);

ALTER TABLE IF EXISTS public.plans
    ADD COLUMN description character varying(1000);
ALTER TABLE IF EXISTS public.plans
    ADD COLUMN unit_type character varying(30);
ALTER TABLE IF EXISTS public.add_ons
    ADD PRIMARY KEY (id);

CREATE TABLE public.plans
(
    plan_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    name character varying(150) NOT NULL,
    amount integer NOT NULL DEFAULT 0,
    no_of_logins integer NOT NULL DEFAULT 5,
    no_of_facilities integer DEFAULT 10,
    no_of_locations integer DEFAULT 1,
    PRIMARY KEY (plan_id)
);

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN plan_id integer;

ALTER TABLE IF EXISTS public.clients
    ADD COLUMN expiry_date timestamp with time zone;

CREATE TABLE public.orders
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    order_id character varying(100),
    plan_id integer NOT NULL,
    amount integer,
    client_id integer,
    created_at timestamp with time zone,
    status integer DEFAULT 1,
    payment_response jsonb,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.orders
    RENAME plan_id TO item_id;

ALTER TABLE IF EXISTS public.orders
    ADD COLUMN item_type character varying(20);

CREATE TABLE public.transactions
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    order_id integer NOT NULL,
    amount integer NOT NULL,
    status integer NOT NULL DEFAULT 1,
    client_id integer NOT NULL,
    razorpay_response jsonb,
    currency character varying(3) DEFAULT 'INR',
    purchased_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    payment_id character varying(250),
    PRIMARY KEY (id)
);


CREATE TABLE public.add_ons
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    name character varying(250) NOT NULL,
    amount integer NOT NULL,
    plan_id integer
);

CREATE TABLE public.feedback
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    guest_name character varying(50),
    mobile character varying(13),
    comments text,
    rating integer NOT NULL,
    PRIMARY KEY (id)
);

-- archive_old_iot_device_data_vendor---------------
DECLARE
    current_timestamp TIMESTAMP := now();  -- Current date
    cutoff_date TIMESTAMP := current_timestamp - INTERVAL '3 months';  -- 3 months before today
    record RECORD;
    quarter_table TEXT;  -- Variable to store quarter partition name
BEGIN 
    -- Loop through data older than 3 months
    FOR record IN 
        SELECT * 
        FROM public.iot_device_data_vendor 
        WHERE ppm_time::timestamp < cutoff_date
    LOOP
        -- Determine the quarter (q1, q2, q3, q4) and year for each record
        quarter_table := 'iot_device_data_vendor_' || to_char(record.ppm_time::timestamp, 'YYYY') || '_q' || 
                  (CASE 
                      WHEN extract(month FROM record.ppm_time::timestamp) BETWEEN 1 AND 3 THEN 1
                      WHEN extract(month FROM record.ppm_time::timestamp) BETWEEN 4 AND 6 THEN 2
                      WHEN extract(month FROM record.ppm_time::timestamp) BETWEEN 7 AND 9 THEN 3
                      ELSE 4
                  END);

        -- Check if the partition table for that year and quarter exists; if not, create it
        EXECUTE 'CREATE TABLE IF NOT EXISTS ' || quarter_table || ' (LIKE public.iot_device_data_vendor INCLUDING ALL)';

        -- Insert the data into the respective quarter partition table
        EXECUTE 'INSERT INTO ' || quarter_table || ' OVERRIDING SYSTEM VALUE SELECT * FROM public.iot_device_data_vendor WHERE id = $1' USING record.id;

        -- Delete the backed-up data from the main table
        DELETE FROM public.iot_device_data_vendor WHERE id = record.id;
    END LOOP;

    -- Output log message for successful execution
    RAISE NOTICE 'Data older than 3 months archived and removed';
END;




-- archive_old_task_allocations-----------------
DECLARE
    current_date DATE := now();  -- Current date
    cutoff_date DATE := current_date - INTERVAL '3 months';  -- 3 months before today
    record RECORD;
    quarter_table TEXT;  -- Variable to store quarter partition name
BEGIN 
    -- Loop through data older than 3 months
    FOR record IN 
        SELECT * 
        FROM public.task_allocation 
        WHERE start_time::timestamp < cutoff_date
    LOOP
        -- Determine the quarter (q1, q2, q3, q4) and year for each record
        quarter_table := 'task_allocation_' || to_char(record.start_time::timestamp, 'YYYY') || '_q' || 
                  (CASE 
                      WHEN extract(month FROM record.start_time::timestamp) BETWEEN 1 AND 3 THEN 1
                      WHEN extract(month FROM record.start_time::timestamp) BETWEEN 4 AND 6 THEN 2
                      WHEN extract(month FROM record.start_time::timestamp) BETWEEN 7 AND 9 THEN 3
                      ELSE 4
                  END);

        -- Check if the partition table for that year and quarter exists; if not, create it
        EXECUTE 'CREATE TABLE IF NOT EXISTS ' || quarter_table || ' (LIKE public.task_allocation INCLUDING ALL)';

        -- Insert the data into the respective quarter partition table
        EXECUTE 'INSERT INTO ' || quarter_table || ' OVERRIDING SYSTEM VALUE SELECT * FROM public.task_allocation WHERE id = $1' USING record.id;

        -- Delete the backed-up data from the main table
        DELETE FROM public.task_allocation WHERE id = record.id;
    END LOOP;

    -- Output log message for successful execution
    RAISE NOTICE 'Data older than 3 months archived and removed';
END;

ALTER TABLE public.auto_task_mapping
ADD COLUMN is_modified BOOLEAN DEFAULT false;

ALTER TABLE public.clients 
ADD COLUMN email VARCHAR COLLATE pg_catalog."default",
ADD COLUMN mobile VARCHAR COLLATE pg_catalog."default",
ADD COLUMN org_name TEXT;

CREATE TABLE IF NOT EXISTS public.cron_metadata
(
    id serial NOT NULL,
    run_date date,
    first_run_completed boolean DEFAULT false,
    last_run_at timestamp without time zone,
    CONSTRAINT cron_metadata_pkey PRIMARY KEY (id),
    CONSTRAINT cron_metadata_run_date_key UNIQUE (run_date)
);
ALTER TABLE public.users ADD COLUMN profile_image VARCHAR(255) COLLATE pg_catalog."default";
ALTER TABLE public.task_checklist
ADD COLUMN category VARCHAR(100) COLLATE pg_catalog."default";

ALTER TABLE public.task_checklist
ADD COLUMN required_time INTEGER;


ALTER TABLE plans 
ADD COLUMN status BOOLEAN DEFAULT TRUE;


CREATE OR REPLACE FUNCTION public.set_is_modified()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Only set `is_modified` to true if it's not already explicitly set to false
    IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND NEW.is_modified IS DISTINCT FROM false) THEN
        NEW.is_modified := true;
    END IF;
    RETURN NEW;
END;
$function$


CREATE TRIGGER is_modified
BEFORE UPDATE OR INSERT ON auto_task_mapping
FOR EACH ROW
EXECUTE FUNCTION set_is_modified();
-- Relase of TASQMaster with new facility flow 
ALTER TABLE clients ADD COLUMN woloo_points INT NOT NULL DEFAULT 0;

ALTER TABLE public.facilities  
ADD COLUMN facility_type TEXT;

ALTER TABLE task_checklist
ADD COLUMN category VARCHAR(100) COLLATE pg_catalog."default",
ADD COLUMN required_time INTEGER;

INSERT INTO task_checklist (task_name, category, required_time)
VALUES ('Kitchen Cleaning','Others', 40),
 ('Deep Cleaning','Others', 180),
  ('Dishwashing','Others', 20),
   ('Laundry','Others', 60),
    ('Dusting','Others', 25),
	 ('Sweeping','Others', 20),
 ('Mopping','Others', 30),
  ('Bathroom Cleaning','Others', 30),
	  ('Toilet Cleaning','Others', 15);


INSERT INTO task_checklist (task_name, category, required_time)
VALUES ('Kitchen Cleaning','Restaurant', 40),
 ('Table Cleaning','Restaurant', 20),
  ('Dishwashing','Restaurant', 20),
   ('Pantry Cleaning','Restaurant', 40),
    ('Deep Cleaning','Restaurant', 180),
	 ('Dusting','Restaurant', 25),
 ('Mopping','Restaurant', 30),
 ('Sweeping','Restaurant', 20),
	  ('Toilet Cleaning','Restaurant', 15);



INSERT INTO task_checklist (task_name, category, required_time)
VALUES   ('Dishwashing','Office', 20),
   ('Bathroom Cleaning','Office', 30),
    ('Deep Cleaning','Office', 180),
	 ('Dusting','Office', 25),
 ('Mopping','Office', 30),
 ('Sweeping','Office', 20),
	  ('Toilet Cleaning','Office', 15);


      INSERT INTO task_checklist (task_name, category, required_time)
VALUES ('Kitchen Cleaning','Home', 40),
('Deep Cleaning','Home', 180),
('Dishwashing','Home', 20),
 ('Laundry','Home', 60),
('Dusting','Home', 25),
 ('Sweeping','Home', 20),
  ('Mopping','Home', 30),
   ('Bathroom Cleaning','Home', 30),
	  ('Toilet Cleaning','Home', 15);


CREATE TABLE IF NOT EXISTS public.settings
(
    id serial NOT NULL,
    key_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value integer NOT NULL,
    CONSTRAINT settings_pkey PRIMARY KEY (id),
    CONSTRAINT settings_key_name_key UNIQUE (key_name)
);

insert into settings (key_name,value) values ('client_expiry_days',15);

-- add indexes for release of exisitng and new facility flow
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_mobile ON users(mobile);

CREATE INDEX idx_janitor_id ON auto_task_mapping(janitor_id);


CREATE INDEX idx_client_email ON clients(email);
CREATE INDEX idx_client_mobile ON clients(mobile);


CREATE INDEX idx_clusters_facilities ON clusters USING GIN (facilities);


CREATE INDEX idx_clusters_users_mapping_cluster_id ON clusters_users_mapping(cluster_id);


CREATE INDEX idx_clusters_users_mapping_janitors ON clusters_users_mapping USING GIN (janitors);

CREATE INDEX idx_facilities_client_id ON facilities(client_id);
CREATE INDEX idx_facilities_location_id ON facilities(location_id);


CREATE INDEX idx_iot_device_id ON iot_device_data_vendor(device_id);

CREATE INDEX idx_locations_client_id ON locations(client_id);

CREATE INDEX idx_booths_facility_id ON booths(facility_id);

CREATE INDEX idx_block_location_id ON blocks(location_id);



CREATE INDEX idx_iot_device_mapping_id ON iot_device_mapping(mapping_id);

ALTER TABLE public.shift
ADD COLUMN facility_id INTEGER;

ALTER TABLE user_subscriptions
ADD COLUMN IF NOT EXISTS transaction_id INTEGER;

-- Add facility_ref column
ALTER TABLE user_subscriptions
ADD COLUMN IF NOT EXISTS facility_ref VARCHAR(100);